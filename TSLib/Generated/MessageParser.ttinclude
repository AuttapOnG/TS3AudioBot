<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Util.ttinclude" once="true" #>
<#+
public static IEnumerable<Messages.Msg> OnlyS2C(IEnumerable<Messages.Msg> enu) => enu.Where(x => x.s2c.Value);
public class Messages
{
	public static Messages Parse(string file)
	{
		var toml = Nett.Toml.ReadFile<Messages>(file);
		toml.BuildMsgs();

		return toml;
	}

	private void BuildMsgs()
	{
		foreach(var (grp, msg) in msg_group.SelectMany(group => group.msg.Select(msg => (group:group, msg:msg))).OrderBy(x => x.msg.name))
		{
			// transfer all default confs
			msg.s2c      ??= grp.@default.s2c;
			msg.c2s      ??= grp.@default.c2s;
			msg.response ??= grp.@default.response;
			msg.low      ??= grp.@default.low;
			msg.np       ??= grp.@default.np;

			orderedMessages.Add(msg);
		}

		var lows = orderedMessages.Where(m => m.low.Value).ToArray();
		foreach (var low in lows)
		{
			if (orderedMessages.Any(m => m.name == low.name))
			{
				orderedMessages.Remove(low);
				removedMessages.Add(low);
			}
		}
	}

	public (Field fld, bool optional) GetField(string name)
	{
		var ret = (fld:fields.FirstOrDefault(x => x.map == name.Trim('?')), optional:name.EndsWith("?"));
		if(ret.fld == null)
			throw new Exception($"Field declaration for \"{name}\" not found");
		return ret;
	}

	private List<Msg> removedMessages = new List<Msg>();
	public IEnumerable<Msg> RemovedMessages => removedMessages;
	private List<Msg> orderedMessages = new List<Msg>();
	public IEnumerable<Msg> OrderedMessages => orderedMessages;
	public IEnumerable<Msg> NotifiesSorted => OrderedMessages.Where(x => x.notify != null);

	public Field[] fields { get; set; }
	public MsgGroup[] msg_group { get; set; }

	public class Field
	{
		public string map { get; set; }
		public string ts { get; set; }
		public string pretty { get; set; }
		public string type { get; set; }

		public string mod { get; set; }
		public string doc { get; set; }

		public bool isArray => mod == "array";
		public string TypeFin(bool optional)
		{
			string ltype;
			switch(type)
			{
				case "PermissionId": ltype = "Ts3Permission"; break;
				default: ltype = type; break;
			}
			return ltype + (isArray ? "[]" : "") + (optional ? "?" : "");
		}
	}

	public class MsgGroup
	{
		public Default @default { get; set; }
		public Msg[] msg { get; set; }
	}

	public class Default
	{
		public bool s2c { get; set; }
		public bool c2s { get; set; }
		public bool response { get; set; }
		public bool low { get; set; }
		public bool np { get; set; }
	}

	public class Msg
	{
		public string name { get; set; }
		public string notify { get; set; }
		public string[] attributes { get; set; }

		public bool? s2c { get; set; }
		public bool? c2s { get; set; }
		public bool? response { get; set; }
		public bool? low { get; set; }
		public bool? np { get; set; }
	}
}
#>