// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />



















using TSLib.Messages;

#pragma warning disable CS8019 // Ignore unused imports
using i8  = System.SByte;
using u8  = System.Byte;
using i16 = System.Int16;
using u16 = System.UInt16;
using i32 = System.Int32;
using u32 = System.UInt32;
using i64 = System.Int64;
using u64 = System.UInt64;
using f32 = System.Single;
using f64 = System.Double;
using str = System.String;

using DateTime = System.DateTime;
using Duration = System.TimeSpan;
using DurationSeconds = System.TimeSpan;
using DurationMilliseconds = System.TimeSpan;
using DurationMillisecondsFloat = System.TimeSpan;
using SocketAddr = System.String;
using IpAddr = System.String;
using Ts3ErrorCode = TSLib.TsErrorCode;
using Ts3Permission = TSLib.TsPermission;

using IconId = System.Int32;
using ConnectionId = System.UInt32;
using EccKeyPubP256 = TSLib.Uid;
#pragma warning restore CS8019

namespace TSLib.Full.Book
{
	public partial class Connection
	{
#pragma warning disable IDE0017, CS0472, CS8073 // Ignore "Object initialization can be simplified", "Something with == and null..."
	public void ApplyChannelCreated(ChannelCreated msg)
	{
		var obj = new Channel();
		{ var tmpv = ChannelTypeCcFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
		{ var tmpv = ChannelOrderCcFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
		{
		var tmp = MaxClientsCcFun(msg);
		{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
		{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
		}
		{ var tmpv = ChannelCodecCcFun(msg); if (tmpv != null) obj.Codec = (Codec)tmpv; }
		{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.ForcedSilence = (bool)tmpv; }
		{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
		obj.IsPrivate = null;
		obj.Guid = null;
		obj.OptionalData = null;
		obj.PermissionHints = null;
		{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
		{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
		{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
		{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
		{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
		{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
		{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
		{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
		SetChannel(obj, msg.ChannelId);
		PostChannelCreated(msg);
	}

	partial void PostChannelCreated(ChannelCreated msg);

	public void ApplyChannelDeleted(ChannelDeleted msg)
	{
		RemoveChannel(msg.ChannelId);
		PostChannelDeleted(msg);
	}

	partial void PostChannelDeleted(ChannelDeleted msg);

	public void ApplyChannelEdited(ChannelEdited msg)
	{
		{
			var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelEdited' has no local object ({$msg})", msg);
				return;
			}
			{
			var tmp = MaxClientsCeFun(msg);
			{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
			{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
			}
			{ var tmpv = ChannelTypeCeFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
			{ var tmpv = ChannelOrderCeFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
			{ var tmpv = msg.Codec; if (tmpv != null) obj.Codec = (Codec)tmpv; }
			{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
			{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
			{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
			{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
			{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
			{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
			{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
		}
		{
			var obj = GetOptionalChannelData(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelEdited' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.Description; if (tmpv != null) obj.Description = (str)tmpv; }
		}
		PostChannelEdited(msg);
	}

	partial void PostChannelEdited(ChannelEdited msg);

	public void ApplyChannelDescriptionChanged(ChannelDescriptionChanged msg)
	{
		RemoveOptionalChannelData(msg.ChannelId);
		PostChannelDescriptionChanged(msg);
	}

	partial void PostChannelDescriptionChanged(ChannelDescriptionChanged msg);

	public void ApplyChannelGroupList(ChannelGroupList msg)
	{
		var obj = new ChannelGroup();
		{ var tmpv = msg.GroupType; if (tmpv != null) obj.GroupType = (GroupType)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.IsPermanent; if (tmpv != null) obj.IsPermanent = (bool)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.NamingMode; if (tmpv != null) obj.NamingMode = (GroupNamingMode)tmpv; }
		{ var tmpv = msg.NeededMemberAddPower; if (tmpv != null) obj.NeededMemberAddPower = (i32)tmpv; }
		{ var tmpv = msg.NeededMemberRemovePower; if (tmpv != null) obj.NeededMemberRemovePower = (i32)tmpv; }
		{ var tmpv = msg.NeededModifyPower; if (tmpv != null) obj.NeededModifyPower = (i32)tmpv; }
		{ var tmpv = msg.SortId; if (tmpv != null) obj.SortId = (i32)tmpv; }
		SetChannelGroup(obj, msg.ChannelGroup);
		PostChannelGroupList(msg);
	}

	partial void PostChannelGroupList(ChannelGroupList msg);

	public void ApplyChannelList(ChannelList msg)
	{
		var obj = new Channel();
		{
		var tmp = MaxClientsClFun(msg);
		{ var tmpv = tmp.Item1; if (tmpv != null) obj.MaxClients = (MaxClients)tmpv; }
		{ var tmpv = tmp.Item2; if (tmpv != null) obj.MaxFamilyClients = (MaxClients)tmpv; }
		}
		{ var tmpv = ChannelTypeClFun(msg); if (tmpv != null) obj.ChannelType = (ChannelType)tmpv; }
		{ var tmpv = ReturnFalse(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
		obj.PermissionHints = null;
		obj.OptionalData = null;
		{ var tmpv = msg.Codec; if (tmpv != null) obj.Codec = (Codec)tmpv; }
		{ var tmpv = msg.CodecLatencyFactor; if (tmpv != null) obj.CodecLatencyFactor = (i32)tmpv; }
		{ var tmpv = msg.CodecQuality; if (tmpv != null) obj.CodecQuality = (u8)tmpv; }
		{ var tmpv = msg.DeleteDelay; if (tmpv != null) obj.DeleteDelay = (Duration)tmpv; }
		{ var tmpv = msg.ForcedSilence; if (tmpv != null) obj.ForcedSilence = (bool)tmpv; }
		{ var tmpv = msg.Guid; if (tmpv != null) obj.Guid = (str)tmpv; }
		{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.IsDefault; if (tmpv != null) obj.IsDefault = (bool)tmpv; }
		{ var tmpv = msg.IsPrivate; if (tmpv != null) obj.IsPrivate = (bool)tmpv; }
		{ var tmpv = msg.IsUnencrypted; if (tmpv != null) obj.IsUnencrypted = (bool)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.NeededTalkPower; if (tmpv != null) obj.NeededTalkPower = (i32)tmpv; }
		{ var tmpv = msg.Order; if (tmpv != null) obj.Order = (ChannelId)tmpv; }
		{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
		{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
		{ var tmpv = msg.Topic; if (tmpv != null) obj.Topic = (str)tmpv; }
		SetChannel(obj, msg.ChannelId);
		PostChannelList(msg);
	}

	partial void PostChannelList(ChannelList msg);

	public void ApplyChannelMoved(ChannelMoved msg)
	{
		var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelMoved' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = ChannelOrderCmFun(msg); if (tmpv != null) obj.Order = (ChannelId)tmpv; }
		{ var tmpv = msg.ParentId; if (tmpv != null) obj.Parent = (ChannelId)tmpv; }
		PostChannelMoved(msg);
	}

	partial void PostChannelMoved(ChannelMoved msg);

	public void ApplyChannelPermissionHints(ChannelPermissionHints msg)
	{
		var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelPermissionHints' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = msg.Flags; if (tmpv != null) obj.PermissionHints = (ChannelPermissionHint)tmpv; }
		PostChannelPermissionHints(msg);
	}

	partial void PostChannelPermissionHints(ChannelPermissionHints msg);

	public void ApplyChannelSubscribed(ChannelSubscribed msg)
	{
		var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelSubscribed' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = ChannelSubscribeFun(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
		PostChannelSubscribed(msg);
	}

	partial void PostChannelSubscribed(ChannelSubscribed msg);

	public void ApplyChannelUnsubscribed(ChannelUnsubscribed msg)
	{
		var obj = GetChannel(msg.ChannelId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ChannelUnsubscribed' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = ChannelUnsubscribeFun(msg); if (tmpv != null) obj.Subscribed = (bool)tmpv; }
		PostChannelUnsubscribed(msg);
	}

	partial void PostChannelUnsubscribed(ChannelUnsubscribed msg);

	public void ApplyClientChannelGroupChanged(ClientChannelGroupChanged msg)
	{
		var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientChannelGroupChanged' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = msg.ChannelGroup; if (tmpv != null) obj.ChannelGroup = (ChannelGroupId)tmpv; }
		PostClientChannelGroupChanged(msg);
	}

	partial void PostClientChannelGroupChanged(ClientChannelGroupChanged msg);

	public void ApplyClientEnterView(ClientEnterView msg)
	{
		var obj = new Client();
		{ var tmpv = AwayCevFun(msg); if (tmpv != null) obj.AwayMessage = (str)tmpv; }
		{ var tmpv = ClientTypeCevFun(msg); if (tmpv != null) obj.ClientType = (ClientType)tmpv; }
		{ var tmpv = TalkPowerCevFun(msg); if (tmpv != null) obj.TalkPowerRequest = (TalkPowerRequest)tmpv; }
		obj.PermissionHints = null;
		obj.OptionalData = null;
		obj.ConnectionData = null;
		{ var tmpv = msg.AvatarHash; if (tmpv != null) obj.AvatarHash = (str)tmpv; }
		{ var tmpv = msg.Badges; if (tmpv != null) obj.Badges = (str)tmpv; }
		{ var tmpv = msg.TargetChannelId; if (tmpv != null) obj.Channel = (ChannelId)tmpv; }
		{ var tmpv = msg.ChannelGroup; if (tmpv != null) obj.ChannelGroup = (ChannelGroupId)tmpv; }
		{ var tmpv = msg.CountryCode; if (tmpv != null) obj.CountryCode = (str)tmpv; }
		{ var tmpv = msg.DatabaseId; if (tmpv != null) obj.DatabaseId = (ClientDbId)tmpv; }
		{ var tmpv = msg.Description; if (tmpv != null) obj.Description = (str)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.InheritedChannelGroupFromChannel; if (tmpv != null) obj.InheritedChannelGroupFromChannel = (ChannelId)tmpv; }
		{ var tmpv = msg.InputHardwareEnabled; if (tmpv != null) obj.InputHardwareEnabled = (bool)tmpv; }
		{ var tmpv = msg.InputMuted; if (tmpv != null) obj.InputMuted = (bool)tmpv; }
		{ var tmpv = msg.IsChannelCommander; if (tmpv != null) obj.IsChannelCommander = (bool)tmpv; }
		{ var tmpv = msg.IsPrioritySpeaker; if (tmpv != null) obj.IsPrioritySpeaker = (bool)tmpv; }
		{ var tmpv = msg.IsRecording; if (tmpv != null) obj.IsRecording = (bool)tmpv; }
		{ var tmpv = msg.Metadata; if (tmpv != null) obj.Metadata = (str)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.NeededServerqueryViewPower; if (tmpv != null) obj.NeededServerqueryViewPower = (i32)tmpv; }
		{ var tmpv = msg.OutputHardwareEnabled; if (tmpv != null) obj.OutputHardwareEnabled = (bool)tmpv; }
		{ var tmpv = msg.OutputMuted; if (tmpv != null) obj.OutputMuted = (bool)tmpv; }
		{ var tmpv = msg.OutputOnlyMuted; if (tmpv != null) obj.OutputOnlyMuted = (bool)tmpv; }
		{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
		{ var tmpa = msg.ServerGroups; if (tmpa != null) { obj.ServerGroups.Clear(); obj.ServerGroups.UnionWith(tmpa); } }
		{ var tmpv = msg.TalkPower; if (tmpv != null) obj.TalkPower = (i32)tmpv; }
		{ var tmpv = msg.TalkPowerGranted; if (tmpv != null) obj.TalkPowerGranted = (bool)tmpv; }
		{ var tmpv = msg.Uid; if (tmpv != null) obj.Uid = (Uid)tmpv; }
		{ var tmpv = msg.UnreadMessages; if (tmpv != null) obj.UnreadMessages = (u32)tmpv; }
		SetClient(obj, msg.ClientId);
		PostClientEnterView(msg);
	}

	partial void PostClientEnterView(ClientEnterView msg);

	public void ApplyClientLeftView(ClientLeftView msg)
	{
		RemoveClient(msg.ClientId);
		PostClientLeftView(msg);
	}

	partial void PostClientLeftView(ClientLeftView msg);

	public void ApplyClientMoved(ClientMoved msg)
	{
		var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientMoved' has no local object ({$msg})", msg);
				return;
			}
		SubscribeChannelFun(msg);
		{ var tmpv = msg.TargetChannelId; if (tmpv != null) obj.Channel = (ChannelId)tmpv; }
		PostClientMoved(msg);
	}

	partial void PostClientMoved(ClientMoved msg);

	public void ApplyClientConnectionInfo(ClientConnectionInfo msg)
	{
		var obj = GetConnectionClientData(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientConnectionInfo' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = AddressFun(msg); if (tmpv != null) obj.ClientAddress = (SocketAddr)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastMinuteControl; if (tmpv != null) obj.BandwidthReceivedLastMinuteControl = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastMinuteKeepalive; if (tmpv != null) obj.BandwidthReceivedLastMinuteKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastMinuteSpeech; if (tmpv != null) obj.BandwidthReceivedLastMinuteSpeech = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastSecondControl; if (tmpv != null) obj.BandwidthReceivedLastSecondControl = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastSecondKeepalive; if (tmpv != null) obj.BandwidthReceivedLastSecondKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastSecondSpeech; if (tmpv != null) obj.BandwidthReceivedLastSecondSpeech = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastMinuteControl; if (tmpv != null) obj.BandwidthSentLastMinuteControl = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastMinuteKeepalive; if (tmpv != null) obj.BandwidthSentLastMinuteKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastMinuteSpeech; if (tmpv != null) obj.BandwidthSentLastMinuteSpeech = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastSecondControl; if (tmpv != null) obj.BandwidthSentLastSecondControl = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastSecondKeepalive; if (tmpv != null) obj.BandwidthSentLastSecondKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastSecondSpeech; if (tmpv != null) obj.BandwidthSentLastSecondSpeech = (u64)tmpv; }
		{ var tmpv = msg.BytesReceivedControl; if (tmpv != null) obj.BytesReceivedControl = (u64)tmpv; }
		{ var tmpv = msg.BytesReceivedKeepalive; if (tmpv != null) obj.BytesReceivedKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BytesReceivedSpeech; if (tmpv != null) obj.BytesReceivedSpeech = (u64)tmpv; }
		{ var tmpv = msg.BytesSentControl; if (tmpv != null) obj.BytesSentControl = (u64)tmpv; }
		{ var tmpv = msg.BytesSentKeepalive; if (tmpv != null) obj.BytesSentKeepalive = (u64)tmpv; }
		{ var tmpv = msg.BytesSentSpeech; if (tmpv != null) obj.BytesSentSpeech = (u64)tmpv; }
		{ var tmpv = msg.ClientToServerPacketlossControl; if (tmpv != null) obj.ClientToServerPacketlossControl = (f32)tmpv; }
		{ var tmpv = msg.ClientToServerPacketlossKeepalive; if (tmpv != null) obj.ClientToServerPacketlossKeepalive = (f32)tmpv; }
		{ var tmpv = msg.ClientToServerPacketlossSpeech; if (tmpv != null) obj.ClientToServerPacketlossSpeech = (f32)tmpv; }
		{ var tmpv = msg.ClientToServerPacketlossTotal; if (tmpv != null) obj.ClientToServerPacketlossTotal = (f32)tmpv; }
		{ var tmpv = msg.ConnectedTime; if (tmpv != null) obj.ConnectedTime = (Duration)tmpv; }
		{ var tmpv = msg.FiletransferBandwidthReceived; if (tmpv != null) obj.FiletransferBandwidthReceived = (u64)tmpv; }
		{ var tmpv = msg.FiletransferBandwidthSent; if (tmpv != null) obj.FiletransferBandwidthSent = (u64)tmpv; }
		{ var tmpv = msg.IdleTime; if (tmpv != null) obj.IdleTime = (Duration)tmpv; }
		{ var tmpv = msg.PacketsReceivedControl; if (tmpv != null) obj.PacketsReceivedControl = (u64)tmpv; }
		{ var tmpv = msg.PacketsReceivedKeepalive; if (tmpv != null) obj.PacketsReceivedKeepalive = (u64)tmpv; }
		{ var tmpv = msg.PacketsReceivedSpeech; if (tmpv != null) obj.PacketsReceivedSpeech = (u64)tmpv; }
		{ var tmpv = msg.PacketsSentControl; if (tmpv != null) obj.PacketsSentControl = (u64)tmpv; }
		{ var tmpv = msg.PacketsSentKeepalive; if (tmpv != null) obj.PacketsSentKeepalive = (u64)tmpv; }
		{ var tmpv = msg.PacketsSentSpeech; if (tmpv != null) obj.PacketsSentSpeech = (u64)tmpv; }
		{ var tmpv = msg.Ping; if (tmpv != null) obj.Ping = (Duration)tmpv; }
		{ var tmpv = msg.PingDeviation; if (tmpv != null) obj.PingDeviation = (Duration)tmpv; }
		{ var tmpv = msg.ServerToClientPacketlossControl; if (tmpv != null) obj.ServerToClientPacketlossControl = (f32)tmpv; }
		{ var tmpv = msg.ServerToClientPacketlossKeepalive; if (tmpv != null) obj.ServerToClientPacketlossKeepalive = (f32)tmpv; }
		{ var tmpv = msg.ServerToClientPacketlossSpeech; if (tmpv != null) obj.ServerToClientPacketlossSpeech = (f32)tmpv; }
		{ var tmpv = msg.ServerToClientPacketlossTotal; if (tmpv != null) obj.ServerToClientPacketlossTotal = (f32)tmpv; }
		PostClientConnectionInfo(msg);
	}

	partial void PostClientConnectionInfo(ClientConnectionInfo msg);

	public void ApplyClientServerGroupAdded(ClientServerGroupAdded msg)
	{
		var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientServerGroupAdded' has no local object ({$msg})", msg);
				return;
			}
		obj.ServerGroups.Add(msg.ServerGroupId);
		PostClientServerGroupAdded(msg);
	}

	partial void PostClientServerGroupAdded(ClientServerGroupAdded msg);

	public void ApplyClientServerGroupRemoved(ClientServerGroupRemoved msg)
	{
		var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientServerGroupRemoved' has no local object ({$msg})", msg);
				return;
			}
		obj.ServerGroups.Remove(msg.ServerGroupId);
		PostClientServerGroupRemoved(msg);
	}

	partial void PostClientServerGroupRemoved(ClientServerGroupRemoved msg);

	public void ApplyClientUpdated(ClientUpdated msg)
	{
		{
			var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientUpdated' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = AwayCuFun(msg); if (tmpv != null) obj.AwayMessage = (str)tmpv; }
			{ var tmpv = TalkPowerCuFun(msg); if (tmpv != null) obj.TalkPowerRequest = (TalkPowerRequest)tmpv; }
			{ var tmpv = msg.AvatarHash; if (tmpv != null) obj.AvatarHash = (str)tmpv; }
			{ var tmpv = msg.Badges; if (tmpv != null) obj.Badges = (str)tmpv; }
			{ var tmpv = msg.ChannelGroup; if (tmpv != null) obj.ChannelGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.Description; if (tmpv != null) obj.Description = (str)tmpv; }
			{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
			{ var tmpv = msg.InheritedChannelGroupFromChannel; if (tmpv != null) obj.InheritedChannelGroupFromChannel = (ChannelId)tmpv; }
			{ var tmpv = msg.InputHardwareEnabled; if (tmpv != null) obj.InputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.InputMuted; if (tmpv != null) obj.InputMuted = (bool)tmpv; }
			{ var tmpv = msg.IsChannelCommander; if (tmpv != null) obj.IsChannelCommander = (bool)tmpv; }
			{ var tmpv = msg.IsPrioritySpeaker; if (tmpv != null) obj.IsPrioritySpeaker = (bool)tmpv; }
			{ var tmpv = msg.IsRecording; if (tmpv != null) obj.IsRecording = (bool)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.NeededServerqueryViewPower; if (tmpv != null) obj.NeededServerqueryViewPower = (i32)tmpv; }
			{ var tmpv = msg.OutputHardwareEnabled; if (tmpv != null) obj.OutputHardwareEnabled = (bool)tmpv; }
			{ var tmpv = msg.OutputMuted; if (tmpv != null) obj.OutputMuted = (bool)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpa = msg.ServerGroups; if (tmpa != null) { obj.ServerGroups.Clear(); obj.ServerGroups.UnionWith(tmpa); } }
			{ var tmpv = msg.TalkPower; if (tmpv != null) obj.TalkPower = (i32)tmpv; }
			{ var tmpv = msg.TalkPowerGranted; if (tmpv != null) obj.TalkPowerGranted = (bool)tmpv; }
			{ var tmpv = msg.UnreadMessages; if (tmpv != null) obj.UnreadMessages = (u32)tmpv; }
		}
		{
			var obj = GetOptionalClientData(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientUpdated' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = ReturnSomeNone(msg); if (tmpv != null) obj.VersionSign = (str)tmpv; }
			{ var tmpv = msg.BytesDownloadedMonth; if (tmpv != null) obj.BytesDownloadedMonth = (u64)tmpv; }
			{ var tmpv = msg.BytesDownloadedTotal; if (tmpv != null) obj.BytesDownloadedTotal = (u64)tmpv; }
			{ var tmpv = msg.BytesUploadedMonth; if (tmpv != null) obj.BytesUploadedMonth = (u64)tmpv; }
			{ var tmpv = msg.BytesUploadedTotal; if (tmpv != null) obj.BytesUploadedTotal = (u64)tmpv; }
			{ var tmpv = msg.ConnectionsTotal; if (tmpv != null) obj.ConnectionsTotal = (u32)tmpv; }
			{ var tmpv = msg.Created; if (tmpv != null) obj.Created = (DateTime)tmpv; }
			{ var tmpv = msg.LastConnected; if (tmpv != null) obj.LastConnected = (DateTime)tmpv; }
			{ var tmpv = msg.LoginName; if (tmpv != null) obj.LoginName = (str)tmpv; }
			{ var tmpv = msg.Platform; if (tmpv != null) obj.Platform = (str)tmpv; }
			{ var tmpv = msg.Version; if (tmpv != null) obj.Version = (str)tmpv; }
		}
		PostClientUpdated(msg);
	}

	partial void PostClientUpdated(ClientUpdated msg);

	public void ApplyClientPermissionHints(ClientPermissionHints msg)
	{
		var obj = GetClient(msg.ClientId);
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ClientPermissionHints' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = msg.Flags; if (tmpv != null) obj.PermissionHints = (ClientPermissionHint)tmpv; }
		PostClientPermissionHints(msg);
	}

	partial void PostClientPermissionHints(ClientPermissionHints msg);

	public void ApplyInitServer(InitServer msg)
	{
		var obj = new Server();
		SetClientDataFun(msg);
		{ var tmpv = msg.AskForPrivilegekey; if (tmpv != null) obj.AskForPrivilegekey = (bool)tmpv; }
		{ var tmpv = msg.CodecEncryptionMode; if (tmpv != null) obj.CodecEncryptionMode = (CodecEncryptionMode)tmpv; }
		{ var tmpv = msg.Created; if (tmpv != null) obj.Created = (DateTime)tmpv; }
		{ var tmpv = msg.DefaultChannelGroup; if (tmpv != null) obj.DefaultChannelGroup = (ChannelGroupId)tmpv; }
		{ var tmpv = msg.DefaultServerGroup; if (tmpv != null) obj.DefaultServerGroup = (ServerGroupId)tmpv; }
		{ var tmpv = msg.HostbannerGfxInterval; if (tmpv != null) obj.HostbannerGfxInterval = (Duration)tmpv; }
		{ var tmpv = msg.HostbannerGfxUrl; if (tmpv != null) obj.HostbannerGfxUrl = (str)tmpv; }
		{ var tmpv = msg.HostbannerMode; if (tmpv != null) obj.HostbannerMode = (HostBannerMode)tmpv; }
		{ var tmpv = msg.HostbannerUrl; if (tmpv != null) obj.HostbannerUrl = (str)tmpv; }
		{ var tmpv = msg.HostbuttonGfxUrl; if (tmpv != null) obj.HostbuttonGfxUrl = (str)tmpv; }
		{ var tmpv = msg.HostbuttonTooltip; if (tmpv != null) obj.HostbuttonTooltip = (str)tmpv; }
		{ var tmpv = msg.HostbuttonUrl; if (tmpv != null) obj.HostbuttonUrl = (str)tmpv; }
		{ var tmpv = msg.Hostmessage; if (tmpv != null) obj.Hostmessage = (str)tmpv; }
		{ var tmpv = msg.HostmessageMode; if (tmpv != null) obj.HostmessageMode = (HostMessageMode)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.VirtualServerId; if (tmpv != null) obj.Id = (u64)tmpv; }
		{ var tmpa = msg.Ips; if (tmpa != null) { obj.Ips = tmpa; } }
		{ var tmpv = msg.MaxClients; if (tmpv != null) obj.MaxClients = (u16)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.Nickname; if (tmpv != null) obj.Nickname = (str)tmpv; }
		{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
		{ var tmpv = msg.Platform; if (tmpv != null) obj.Platform = (str)tmpv; }
		{ var tmpv = msg.PrioritySpeakerDimmModificator; if (tmpv != null) obj.PrioritySpeakerDimmModificator = (f32)tmpv; }
		{ var tmpv = msg.ProtocolVersion; if (tmpv != null) obj.ProtocolVersion = (u16)tmpv; }
		{ var tmpv = msg.TempChannelDefaultDeleteDelay; if (tmpv != null) obj.TempChannelDefaultDeleteDelay = (Duration)tmpv; }
		{ var tmpv = msg.Version; if (tmpv != null) obj.Version = (str)tmpv; }
		{ var tmpv = msg.WelcomeMessage; if (tmpv != null) obj.WelcomeMessage = (str)tmpv; }
		SetServer(obj);
		PostInitServer(msg);
	}

	partial void PostInitServer(InitServer msg);

	public void ApplyServerEdited(ServerEdited msg)
	{
		{
			var obj = GetServer();
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ServerEdited' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.CodecEncryptionMode; if (tmpv != null) obj.CodecEncryptionMode = (CodecEncryptionMode)tmpv; }
			{ var tmpv = msg.DefaultChannelGroup; if (tmpv != null) obj.DefaultChannelGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.DefaultServerGroup; if (tmpv != null) obj.DefaultServerGroup = (ServerGroupId)tmpv; }
			{ var tmpv = msg.HostbannerGfxInterval; if (tmpv != null) obj.HostbannerGfxInterval = (Duration)tmpv; }
			{ var tmpv = msg.HostbannerGfxUrl; if (tmpv != null) obj.HostbannerGfxUrl = (str)tmpv; }
			{ var tmpv = msg.HostbannerMode; if (tmpv != null) obj.HostbannerMode = (HostBannerMode)tmpv; }
			{ var tmpv = msg.HostbannerUrl; if (tmpv != null) obj.HostbannerUrl = (str)tmpv; }
			{ var tmpv = msg.HostbuttonGfxUrl; if (tmpv != null) obj.HostbuttonGfxUrl = (str)tmpv; }
			{ var tmpv = msg.HostbuttonTooltip; if (tmpv != null) obj.HostbuttonTooltip = (str)tmpv; }
			{ var tmpv = msg.HostbuttonUrl; if (tmpv != null) obj.HostbuttonUrl = (str)tmpv; }
			{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
			{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
			{ var tmpv = msg.Nickname; if (tmpv != null) obj.Nickname = (str)tmpv; }
			{ var tmpv = msg.PhoneticName; if (tmpv != null) obj.PhoneticName = (str)tmpv; }
			{ var tmpv = msg.PrioritySpeakerDimmModificator; if (tmpv != null) obj.PrioritySpeakerDimmModificator = (f32)tmpv; }
			{ var tmpv = msg.TempChannelDefaultDeleteDelay; if (tmpv != null) obj.TempChannelDefaultDeleteDelay = (Duration)tmpv; }
		}
		{
			RemoveOptionalServerData();
		}
		PostServerEdited(msg);
	}

	partial void PostServerEdited(ServerEdited msg);

	public void ApplyServerUpdated(ServerUpdated msg)
	{
		{
			var obj = GetServer();
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ServerUpdated' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.Hostmessage; if (tmpv != null) obj.Hostmessage = (str)tmpv; }
			{ var tmpv = msg.HostmessageMode; if (tmpv != null) obj.HostmessageMode = (HostMessageMode)tmpv; }
			{ var tmpv = msg.MaxClients; if (tmpv != null) obj.MaxClients = (u16)tmpv; }
			{ var tmpv = msg.WelcomeMessage; if (tmpv != null) obj.WelcomeMessage = (str)tmpv; }
		}
		{
			var obj = GetOptionalServerData();
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ServerUpdated' has no local object ({$msg})", msg);
				return;
			}
			{ var tmpv = msg.AntifloodPointsTickReduce; if (tmpv != null) obj.AntifloodPointsTickReduce = (u32)tmpv; }
			{ var tmpv = msg.AntifloodPointsToCommandBlock; if (tmpv != null) obj.AntifloodPointsToCommandBlock = (u32)tmpv; }
			{ var tmpv = msg.AntifloodPointsToIpBlock; if (tmpv != null) obj.AntifloodPointsToIpBlock = (u32)tmpv; }
			{ var tmpv = msg.AntifloodPointsToPluginBlock; if (tmpv != null) obj.AntifloodPointsToPluginBlock = (u32)tmpv; }
			{ var tmpv = msg.Autostart; if (tmpv != null) obj.Autostart = (bool)tmpv; }
			{ var tmpv = msg.BytesDownloadedMonth; if (tmpv != null) obj.BytesDownloadedMonth = (u64)tmpv; }
			{ var tmpv = msg.BytesDownloadedTotal; if (tmpv != null) obj.BytesDownloadedTotal = (u64)tmpv; }
			{ var tmpv = msg.BytesUploadedMonth; if (tmpv != null) obj.BytesUploadedMonth = (u64)tmpv; }
			{ var tmpv = msg.BytesUploadedTotal; if (tmpv != null) obj.BytesUploadedTotal = (u64)tmpv; }
			{ var tmpv = msg.ChannelCount; if (tmpv != null) obj.ChannelCount = (u64)tmpv; }
			{ var tmpv = msg.ClientCount; if (tmpv != null) obj.ClientCount = (u16)tmpv; }
			{ var tmpv = msg.ComplainAutobanCount; if (tmpv != null) obj.ComplainAutobanCount = (u32)tmpv; }
			{ var tmpv = msg.ComplainAutobanTime; if (tmpv != null) obj.ComplainAutobanTime = (Duration)tmpv; }
			{ var tmpv = msg.ComplainRemoveTime; if (tmpv != null) obj.ComplainRemoveTime = (Duration)tmpv; }
			{ var tmpv = msg.ConnectionCountTotal; if (tmpv != null) obj.ConnectionCountTotal = (u64)tmpv; }
			{ var tmpv = msg.DefaultChannelAdminGroup; if (tmpv != null) obj.DefaultChannelAdminGroup = (ChannelGroupId)tmpv; }
			{ var tmpv = msg.DownloadQuota; if (tmpv != null) obj.DownloadQuota = (u64)tmpv; }
			{ var tmpv = msg.HasPassword; if (tmpv != null) obj.HasPassword = (bool)tmpv; }
			{ var tmpv = msg.LogChannel; if (tmpv != null) obj.LogChannel = (bool)tmpv; }
			{ var tmpv = msg.LogClient; if (tmpv != null) obj.LogClient = (bool)tmpv; }
			{ var tmpv = msg.LogFiletransfer; if (tmpv != null) obj.LogFiletransfer = (bool)tmpv; }
			{ var tmpv = msg.LogPermissions; if (tmpv != null) obj.LogPermissions = (bool)tmpv; }
			{ var tmpv = msg.LogQuery; if (tmpv != null) obj.LogQuery = (bool)tmpv; }
			{ var tmpv = msg.LogServer; if (tmpv != null) obj.LogServer = (bool)tmpv; }
			{ var tmpv = msg.MachineId; if (tmpv != null) obj.MachineId = (str)tmpv; }
			{ var tmpv = msg.MaxDownloadBandwidthTotal; if (tmpv != null) obj.MaxDownloadBandwidthTotal = (u64)tmpv; }
			{ var tmpv = msg.MaxUploadBandwidthTotal; if (tmpv != null) obj.MaxUploadBandwidthTotal = (u64)tmpv; }
			{ var tmpv = msg.MinAndroidVersion; if (tmpv != null) obj.MinAndroidVersion = (DateTime)tmpv; }
			{ var tmpv = msg.MinClientsInChannelBeforeForcedSilence; if (tmpv != null) obj.MinClientsInChannelBeforeForcedSilence = (u16)tmpv; }
			{ var tmpv = msg.MinClientVersion; if (tmpv != null) obj.MinClientVersion = (DateTime)tmpv; }
			{ var tmpv = msg.MinIosVersion; if (tmpv != null) obj.MinIosVersion = (DateTime)tmpv; }
			{ var tmpv = msg.NeededIdentitySecurityLevel; if (tmpv != null) obj.NeededIdentitySecurityLevel = (u8)tmpv; }
			{ var tmpv = msg.Port; if (tmpv != null) obj.Port = (u16)tmpv; }
			{ var tmpv = msg.QueryCount; if (tmpv != null) obj.QueryCount = (u32)tmpv; }
			{ var tmpv = msg.QueryCountTotal; if (tmpv != null) obj.QueryCountTotal = (u64)tmpv; }
			{ var tmpv = msg.ReservedSlots; if (tmpv != null) obj.ReservedSlots = (u16)tmpv; }
			{ var tmpv = msg.TotalPacketloss; if (tmpv != null) obj.TotalPacketloss = (f32)tmpv; }
			{ var tmpv = msg.TotalPacketlossControl; if (tmpv != null) obj.TotalPacketlossControl = (f32)tmpv; }
			{ var tmpv = msg.TotalPacketlossKeepalive; if (tmpv != null) obj.TotalPacketlossKeepalive = (f32)tmpv; }
			{ var tmpv = msg.TotalPacketlossSpeech; if (tmpv != null) obj.TotalPacketlossSpeech = (f32)tmpv; }
			{ var tmpv = msg.TotalPing; if (tmpv != null) obj.TotalPing = (Duration)tmpv; }
			{ var tmpv = msg.UploadQuota; if (tmpv != null) obj.UploadQuota = (u64)tmpv; }
			{ var tmpv = msg.Uptime; if (tmpv != null) obj.Uptime = (Duration)tmpv; }
			{ var tmpv = msg.WeblistEnabled; if (tmpv != null) obj.WeblistEnabled = (bool)tmpv; }
		}
		PostServerUpdated(msg);
	}

	partial void PostServerUpdated(ServerUpdated msg);

	public void ApplyServerGroupList(ServerGroupList msg)
	{
		var obj = new ServerGroup();
		{ var tmpv = msg.GroupType; if (tmpv != null) obj.GroupType = (GroupType)tmpv; }
		{ var tmpv = msg.Icon; if (tmpv != null) obj.Icon = (IconId)tmpv; }
		{ var tmpv = msg.IsPermanent; if (tmpv != null) obj.IsPermanent = (bool)tmpv; }
		{ var tmpv = msg.Name; if (tmpv != null) obj.Name = (str)tmpv; }
		{ var tmpv = msg.NamingMode; if (tmpv != null) obj.NamingMode = (GroupNamingMode)tmpv; }
		{ var tmpv = msg.NeededMemberAddPower; if (tmpv != null) obj.NeededMemberAddPower = (i32)tmpv; }
		{ var tmpv = msg.NeededMemberRemovePower; if (tmpv != null) obj.NeededMemberRemovePower = (i32)tmpv; }
		{ var tmpv = msg.NeededModifyPower; if (tmpv != null) obj.NeededModifyPower = (i32)tmpv; }
		{ var tmpv = msg.SortId; if (tmpv != null) obj.SortId = (i32)tmpv; }
		SetServerGroup(obj, msg.ServerGroupId);
		PostServerGroupList(msg);
	}

	partial void PostServerGroupList(ServerGroupList msg);

	public void ApplyServerConnectionInfo(ServerConnectionInfo msg)
	{
		var obj = GetConnectionServerData();
			if (obj == null) {
				Log.Warn("Internal Book protocol error. Update 'ServerConnectionInfo' has no local object ({$msg})", msg);
				return;
			}
		{ var tmpv = msg.BandwidthReceivedLastMinuteTotal; if (tmpv != null) obj.BandwidthReceivedLastMinuteTotal = (u64)tmpv; }
		{ var tmpv = msg.BandwidthReceivedLastSecondTotal; if (tmpv != null) obj.BandwidthReceivedLastSecondTotal = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastMinuteTotal; if (tmpv != null) obj.BandwidthSentLastMinuteTotal = (u64)tmpv; }
		{ var tmpv = msg.BandwidthSentLastSecondTotal; if (tmpv != null) obj.BandwidthSentLastSecondTotal = (u64)tmpv; }
		{ var tmpv = msg.BytesReceivedTotal; if (tmpv != null) obj.BytesReceivedTotal = (u64)tmpv; }
		{ var tmpv = msg.BytesSentTotal; if (tmpv != null) obj.BytesSentTotal = (u64)tmpv; }
		{ var tmpv = msg.ConnectedTime; if (tmpv != null) obj.ConnectedTime = (Duration)tmpv; }
		{ var tmpv = msg.FiletransferBandwidthReceived; if (tmpv != null) obj.FiletransferBandwidthReceived = (u64)tmpv; }
		{ var tmpv = msg.FiletransferBandwidthSent; if (tmpv != null) obj.FiletransferBandwidthSent = (u64)tmpv; }
		{ var tmpv = msg.FiletransferBytesReceivedTotal; if (tmpv != null) obj.FiletransferBytesReceivedTotal = (u64)tmpv; }
		{ var tmpv = msg.FiletransferBytesSentTotal; if (tmpv != null) obj.FiletransferBytesSentTotal = (u64)tmpv; }
		{ var tmpv = msg.PacketlossTotal; if (tmpv != null) obj.PacketlossTotal = (f32)tmpv; }
		{ var tmpv = msg.PacketsReceivedTotal; if (tmpv != null) obj.PacketsReceivedTotal = (u64)tmpv; }
		{ var tmpv = msg.PacketsSentTotal; if (tmpv != null) obj.PacketsSentTotal = (u64)tmpv; }
		{ var tmpv = msg.Ping; if (tmpv != null) obj.Ping = (Duration)tmpv; }
		PostServerConnectionInfo(msg);
	}

	partial void PostServerConnectionInfo(ServerConnectionInfo msg);

	
#pragma warning restore IDE0017, CS0472, CS8073
	}
}
