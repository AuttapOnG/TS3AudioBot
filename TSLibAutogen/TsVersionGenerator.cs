// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace TSLibAutogen;

public class TsVersionGenerator
{
	static readonly Dictionary<string, Ver> dict = new()
	{
		{ "Windows", new("WIN", "Windows") },
		{ "Linux", new("LIN", "Linux") },
		{ "OS X", new("MAC", "MacOs") },
		{ "macOS", new("MAC", "MacOs") },
		{ "Android", new("AND", "Android") },
		{ "iOS", new("IOS", "Ios") },
	};

	static readonly Regex reg = new(@"^(\d(?:\.[\d?]+)+)");
	static readonly Regex VersionPattern = new(@"([^ ])* \[Build: (\d+)\]");

	public static IEnumerable<GenFile> Build(GenerationContextType context, Model model)
	{
		var sourceBuilder = new CodeBuilder();

		sourceBuilder.AppendLine("using System;");
		sourceBuilder.AppendLine("namespace TSLib {");
		sourceBuilder.AppendLine("partial class TsVersionSigned {");

		static string BuildToFld(string build)
		{
			var m = reg.Match(build);
			return string.Join("_", m.Groups[1].Value.Split('.').Select(x => x.Replace("?", "X")));
		}

		var duplicates = new HashSet<string>();
		foreach (var verData in model.Versions)
		{
			var ver = dict[verData.Platform];
			var fldName = $"VER_{ver.Plat}_{BuildToFld(verData.Build)}";
			if (duplicates.Contains(fldName))
				continue;
			duplicates.Add(fldName);
			var build = VersionPattern.Match(verData.Build).Groups[2].Value;

			sourceBuilder.AppendFormatLine("public static TsVersionSigned {0} {{ get; }} = new TsVersionSigned(\"{1}\", \"{2}\", ClientPlatform.{3}, {4}UL, \"{5}\");",
				fldName,
				verData.Build,
				verData.Platform,
				ver.Enu,
				build,
				verData.Hash);
		}

		sourceBuilder.PopCloseBrace();
		sourceBuilder.PopCloseBrace();

		return new[] { new GenFile("Versions", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8)) };
	}

	record Ver(string Plat, string Enu);
}
